gsub("\n| \\-|\\n","",y) #%>% word(.,1,1)
gsub("\n| \\-|\\n","",y) %>% str_trim()#%>% word(.,1,1)
gsub("\n| \\-|\\n","",y) %>% str_trim() %>% word(.,1,1)
gsub("\n | \\-","",y)
gsub("\\n | \\-","",y)
gsub("\n|\\-|\\n","",y)
gsub("\n|\\-|\\n","",y) %>% str_trim()
gsub("\n|\\-|\\n","",y) %>% str_trim() %>% word(.,1,1)
df_test[,.N,state_ad]
state_adjust <- df_test$state_ad %>% gsub("\n|\\-|\\n","", .) %>% str_trim() %>% word(.,1,1)
state_adjust
unique(state_adjust)
df_test[, state_only := state_adjust]
df_test[,.N,state_only]
?gsub
filepath <- "D:/Projects/EVE/Eve/"
df_origin <- fread(paste0(filepath,"data_collect_raw_08_30_2021.csv"))
class(df_origin) # check if data.table
str(df_origin) # quick look
df_test <- df_origin # avoid to make change on original data table
# check odometer variable
df_test[,.N,odo_adj]
# classify the new and used cars where used cars always come to "XXX km".
df_test[, odo_adj := word(df_test$odometer,2,2)]
# Fix incorrect seller variables
df_test[,id:= seq(1,76819,1)]
df_test[, seller_ad := ifelse(df_test$id <= 47999, "incorrect seller", df_test$seller)]
# fix state
df_test[, state_ad := ifelse(state == "", state_2,state)]
df_test[,.N,state_ad]
state_adjust <- df_test$state_ad %>% gsub("\n|\\-|\\n","", .) %>% str_trim() %>% word(.,1,1)
unique(state_adjust)
df_test[, state_only := state_adjust]
df_test[,.N,state_only]
# generate new and used car data tables
df_usedcars <- df_test[odo_adj == "km"]
df_newcars <- rbind(df_test[!odo_adj == "km"],df_test[is.na(odo_adj)])
# check odometer variable
df_test[,.N,odo_ad]
# check odometer variable
df_test[,.N,odo]
# check odometer variable
df_test[,.N,odometer]
df_newcars[,.N,odometer]
df_newcars[,.N,body]
df_newcars[,.N,trans]
df_newcars[,.N,engline]
df_newcars[,.N,odo_adj]
df_newcars[,.N,state]
df_newcars[body_adj == 'AMT']
body_type <- c("Hatch", "SUV", "Sedan", "People Mover",
"Ute", "Convertible", "Cab Chassis",
"Coupe", "Van", "AMT", "Bus", "Wagon", "Light Truck")
# fix body type
body_adj <- ifelse(df_newcars$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_newcars$odometer, df_newcars$body)
unique(body_adj)
df_newcars[, body_adj := body_adj]
df_newcars <- df_newcars[!body_adj == "" & body_adj!= "AMT"]
df_newcars[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_newcars$trans %in% c("Automatic", "Manual"), df_newcars$trans, df_newcars$body)
unique(trans_adj)
df_newcars[, trans_ad := trans_adj]
df_newcars[,.N,trans_ad]
df_newcars <- df_newcars[trans_ad != "Hatch"]
# fix odometer
df_newcars[, odo_ad := 0]
# fix engine
engine_adj <- ifelse(df_newcars$engline %in% "", df_newcars$trans, df_newcars$engline)
unique(engine_adj)
df_newcars[, engine_ad := engine_adj]
df_newcars[,.N,engine_ad]
# fix state
df_newcars[,.N,state_ad]
# fix state
df_newcars[,.N,state_only]
# fix price
df_test[, price_adj := as.numeric(gsub("\$|\,","",price))]
gsub("\$|\,","", df_test$price)
gsub("\$ | \,","", df_test$price)
gsub("\\$ | \,","", df_test$price)
gsub("\\$ | \\,","", df_test$price)
gsub("\\$|\\,","", df_test$price)
# fix price
price_ad <- gsub("\\$|\\,","", df_test$price) %>% as.numeric()
unique(price_ad)
df_test[, price_adj := price_ad]
library(data.table)
library(tidyverse)
filepath <- "D:/Projects/EVE/Eve/"
df_origin <- fread(paste0(filepath,"data_collect_raw_08_30_2021.csv"))
class(df_origin) # check if data.table
str(df_origin) # quick look
df_test <- df_origin # avoid to make change on original data table
# check odometer variable
df_test[,.N,odometer]
# classify the new and used cars where used cars always come to "XXX km".
df_test[, odo_adj := word(df_test$odometer,2,2)]
# Fix incorrect seller variables
df_test[,id:= seq(1,76819,1)]
df_test[, seller_ad := ifelse(df_test$id <= 47999, "incorrect seller", df_test$seller)]
# fix state
df_test[, state_ad := ifelse(state == "", state_2,state)]
df_test[,.N,state_ad]
state_adjust <- df_test$state_ad %>% gsub("\n|\\-|\\n","", .) %>% str_trim() %>% word(.,1,1)
unique(state_adjust)
df_test[, state_only := state_adjust]
df_test[,.N,state_only]
# fix price
price_ad <- gsub("\\$|\\,","", df_test$price) %>% as.numeric()
unique(price_ad)
df_test[, price_adj := price_ad]
# generate new and used car data tables
df_usedcars <- df_test[odo_adj == "km"]
df_newcars <- rbind(df_test[!odo_adj == "km"],df_test[is.na(odo_adj)])
df_newcars[,.N,odometer]
df_newcars[,.N,body]
df_newcars[,.N,trans]
df_newcars[,.N,engline]
df_newcars[,.N,odo_adj]
df_newcars[,.N,state]
df_newcars[body_adj == 'AMT']
body_type <- c("Hatch", "SUV", "Sedan", "People Mover",
"Ute", "Convertible", "Cab Chassis",
"Coupe", "Van", "AMT", "Bus", "Wagon", "Light Truck")
# fix body type
body_adj <- ifelse(df_newcars$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_newcars$odometer, df_newcars$body)
unique(body_adj)
df_newcars[, body_adj := body_adj]
df_newcars <- df_newcars[!body_adj == "" & body_adj!= "AMT"]
df_newcars[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_newcars$trans %in% c("Automatic", "Manual"), df_newcars$trans, df_newcars$body)
unique(trans_adj)
df_newcars[, trans_ad := trans_adj]
df_newcars[,.N,trans_ad]
df_newcars <- df_newcars[trans_ad != "Hatch"]
# fix odometer
df_newcars[, odo_ad := 0]
# fix engine
engine_adj <- ifelse(df_newcars$engline %in% "", df_newcars$trans, df_newcars$engline)
unique(engine_adj)
df_newcars[, engine_ad := engine_adj]
df_newcars[,.N,engine_ad]
# fix state
df_newcars[,.N,state_only]
df_newcars[,.N,engine_ad]
df_newcars[,.N,trans_ad]
df_newcars[,.N,body_adj]
# variable check
df_newcars[,.N,state_only]
df_newcars[,.N,price_adj]
df_newcars[,.N,price_adj][order(N)]
df_newcars[,.N,body_adj]
df_newcars[,.N,trans_ad]
df_newcars[,.N,engine_ad]
View(df_usedcars)
class(df_origin) # check if data.table
str(df_origin) # quick look
df_test <- df_origin # avoid to make change on original data table
# check odometer variable
df_test[,.N,odometer]
# classify the new and used cars where used cars always come to "XXX km".
df_test[, odo_adj := word(df_test$odometer,2,2)]
# Fix incorrect seller variables
df_test[,id:= seq(1,76819,1)]
df_test[, seller_ad := ifelse(df_test$id <= 47999, "incorrect seller", df_test$seller)]
# fix state
df_test[, state_ad := ifelse(state == "", state_2,state)]
df_test[,.N,state_ad]
state_adjust <- df_test$state_ad %>% gsub("\n|\\-|\\n","", .) %>% str_trim() %>% word(.,1,1)
unique(state_adjust)
df_test[, state_only := state_adjust]
df_test[,.N,state_only]
# fix price
price_ad <- gsub("\\$|\\,|\\*","", df_test$price) %>% as.numeric()
unique(price_ad)
df_test[, price_adj := price_ad]
# generate new and used car data tables
df_usedcars <- df_test[odo_adj == "km"]
df_newcars <- rbind(df_test[!odo_adj == "km"],df_test[is.na(odo_adj)])
df_newcars[,.N,price_adj][order(N)]
# used car check
df_newcars[,.N,state_only]
df_newcars[,.N,body]
# used car check
df_usedcars[,.N,state_only]
df_usedcars[,.N,price_adj][order(N)]
df_usedcars[,.N,body]
df_usedcars[,.N,trans_ad]
df_usedcars[,.N,trans]
df_usedcars[,.N,engline]
df_usedcars[,.N,trans]
df_usedcars[,.N,body]
df_newcars[,.N,body_adj]
df_newcars[,.N,body_adj]
df_newcars[,.N,body_ad]
# fix body type
body_adj <- ifelse(df_newcars$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_newcars$odometer, df_newcars$body)
unique(body_adj)
df_newcars[, body_adj := body_adj]
df_newcars <- df_newcars[!body_adj == "" & body_adj!= "AMT"]
df_newcars[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_newcars$trans %in% c("Automatic", "Manual"), df_newcars$trans, df_newcars$body)
unique(trans_adj)
df_newcars[, trans_ad := trans_adj]
df_newcars[,.N,trans_ad]
df_newcars <- df_newcars[trans_ad != "Hatch"]
# fix odometer
df_newcars[, odo_ad := 0]
# fix engine
engine_adj <- ifelse(df_newcars$engline %in% "", df_newcars$trans, df_newcars$engline)
unique(engine_adj)
df_newcars[, engine_ad := engine_adj]
df_newcars[,.N,engine_ad]
# fix state
df_newcars[,.N,state_only]
# variable check
df_newcars[,.N,state_only]
df_newcars[,.N,price_adj][order(N)]
df_newcars[,.N,body_adj]
df_newcars[,.N,trans_ad]
df_newcars[,.N,engine_ad]
df_newcars[,.N,body_adj]
df_usedcars[,.N,body]
# fix body type
df_usedcars <- df_usedcars[, body != "Manual" & "AMT"]
# fix body type
df_usedcars <- df_usedcars[, body != "Manual" & != "AMT"]
# fix body type
df_usedcars <- df_usedcars[, body != "Manual" & body != "AMT"]
# generate new and used car data tables
df_usedcars <- df_test[odo_adj == "km"]
# fix body type
df_usedcars[, body != "Manual" & body != "AMT"]
# fix body type
df_usedcars[body != "Manual" & body != "AMT"]
# fix body type
df_usedcars <- df_usedcars[body != "Manual" & body != "AMT"]
df_usedcars[,.N,trans]
df_usedcars[, body_adj := body]
df_newcars[,.N,trans_ad]
df_newcars <- rbind(df_test[!odo_adj == "km"],df_test[is.na(odo_adj)])
body_adj <- ifelse(df_newcars$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_newcars$odometer, df_newcars$body)
unique(body_adj)
df_newcars[, body_adj := body_adj]
df_newcars <- df_newcars[!body_adj == "" & body_adj!= "AMT"]
df_newcars[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_newcars$trans %in% c("Automatic", "Manual","AMT"), df_newcars$trans, df_newcars$body)
unique(trans_adj)
df_newcars[, trans_ad := trans_adj]
df_newcars[,.N,trans_ad]
df_newcars <- df_newcars[trans_ad != "Hatch"]
df_newcars[,.N,trans_ad]
# fix body type
body_adj <- ifelse(df_newcars$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_newcars$odometer, df_newcars$body)
unique(body_adj)
df_newcars[, body_adj := body_adj]
df_newcars <- df_newcars[!body_adj == "" & body_adj!= "AMT"]
df_newcars[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_newcars$trans %in% c("Automatic", "Manual","AMT"), df_newcars$trans, df_newcars$body)
unique(trans_adj)
df_newcars[, trans_ad := trans_adj]
df_newcars[,.N,trans_ad]
df_newcars <- df_newcars[trans_ad != "Hatch"]
# fix odometer
df_newcars[, odo_ad := 0]
# fix engine
engine_adj <- ifelse(df_newcars$engline %in% "", df_newcars$trans, df_newcars$engline)
unique(engine_adj)
df_newcars[, engine_ad := engine_adj]
df_newcars[,.N,engine_ad]
# fix state
df_newcars[,.N,state_only]
# variable check
df_newcars[,.N,state_only]
df_newcars[,.N,price_adj][order(N)]
df_newcars[,.N,body_adj]
df_newcars[,.N,trans_ad]
df_newcars[,.N,engine_ad]
# variable check
df_newcars[,.N,state_only]
df_newcars[,.N,price_adj][order(N)]
df_newcars[,.N,body_adj]
df_newcars[,.N,body_adj]
df_newcars[,.N,trans_ad]
df_usedcars[,.N,engline]
# fix body type
df_usedcars <- df_usedcars[body != "Manual" & body != "AMT"]
df_usedcars[, body_adj := body]
df_usedcars[,.N,trans]
df_usedcars[,.N,engline]
# fix trans
# fix engine
unique(df_usedcars$engline)
# used car check
df_usedcars[,.N,state_only]
# fix trans
df_usedcars[,trans_ad:= trans]
# odo
df_usedcars[, odo_ad := odometer]
df_usedcars[, engine_ad := engline]
str(df_newcars)
# fix body type
body_adj <- ifelse(df_test$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_test$odometer, df_test$body)
unique(body_adj)
df_test[, body_adj := body_adj]
df_test <- df_test[!body_adj == "" & body_adj!= "AMT"]
df_test[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_test$trans %in% c("Automatic", "Manual","AMT"), df_test$trans, df_test$body)
unique(trans_adj)
df_test[, trans_ad := trans_adj]
df_test[,.N,trans_ad]
df_test <- df_test[trans_ad != "Hatch"]
# fix odometer
df_test[, odo_ad := 0]
# fix engine
engine_adj <- ifelse(df_test$engline %in% "", df_test$trans, df_test$engline)
unique(engine_adj)
df_test[, engine_ad := engine_adj]
df_test[,.N,engine_ad]
# fix state
df_test[,.N,state_only]
# variable check
df_test[,.N,state_only]
df_test[,.N,price_adj][order(N)]
df_test[,.N,body_adj]
df_test[,.N,trans_ad]
df_test[,.N,engine_ad]
# variable check
df_test[,.N,state_only]
df_test[,.N,price_adj][order(N)]
df_test[,.N,body_adj]
df_test[,.N,trans_ad]
df_test[,.N,engine_ad]
df_test[,.N,body_adj]
df_test[!body_adj == "147,014 km" & "194,132 km"]
df_test[body_adj != "147,014 km" & "194,132 km"]
df_test[body_adj != ("147,014 km" & "194,132 km")]
df_test[body_adj != c("147,014 km" & "194,132 km")]
df_test[body_adj != "147,014 km" & body_adj !="194,132 km"]
df_test <- df_test[body_adj != "147,014 km" & body_adj !="194,132 km"]
df_test[,.N,body_adj]
df_test[,.N,trans_ad]
df_test <- df_test[trans_ad != "People Mover"]
df_test[,.N,trans_ad]
df_test <- df_test[trans_ad != "People Mover" & trans_ad != "SUV"]
df_test[,.N,trans_ad]
df_test[,.N,engine_ad]
unique(df_test$engine_ad)
class(df_origin) # check if data.table
str(df_origin) # quick look
df_test <- df_origin # avoid to make change on original data table
# check odometer variable
df_test[,.N,odometer]
# classify the new and used cars where used cars always come to "XXX km".
df_test[, odo_adj := word(df_test$odometer,2,2)]
# Fix incorrect seller variables
df_test[,id:= seq(1,76819,1)]
df_test[, seller_ad := ifelse(df_test$id <= 47999, "incorrect seller", df_test$seller)]
# fix state
df_test[, state_ad := ifelse(state == "", state_2,state)]
df_test[,.N,state_ad]
state_adjust <- df_test$state_ad %>% gsub("\n|\\-|\\n","", .) %>% str_trim() %>% word(.,1,1)
unique(state_adjust)
df_test[, state_only := state_adjust]
df_test[,.N,state_only]
# fix price
price_ad <- gsub("\\$|\\,|\\*","", df_test$price) %>% as.numeric()
unique(price_ad)
df_test[, price_adj := price_ad]
# generate new and used car data tables
df_usedcars <- df_test[odo_adj == "km"]
df_newcars <- rbind(df_test[!odo_adj == "km"],df_test[is.na(odo_adj)])
library(data.table)
library(tidyverse)
filepath <- "D:/Projects/EVE/Eve/"
df_origin <- fread(paste0(filepath,"data_collect_raw_08_30_2021.csv"))
class(df_origin) # check if data.table
str(df_origin) # quick look
df_test <- df_origin # avoid to make change on original data table
# check odometer variable
df_test[,.N,odometer]
# classify the new and used cars where used cars always come to "XXX km".
df_test[, odo_adj := word(df_test$odometer,2,2)]
# Fix incorrect seller variables
df_test[,id:= seq(1,76819,1)]
df_test[, seller_ad := ifelse(df_test$id <= 47999, "incorrect seller", df_test$seller)]
# fix state
df_test[, state_ad := ifelse(state == "", state_2,state)]
df_test[,.N,state_ad]
state_adjust <- df_test$state_ad %>% gsub("\n|\\-|\\n","", .) %>% str_trim() %>% word(.,1,1)
unique(state_adjust)
df_test[, state_only := state_adjust]
df_test[,.N,state_only]
# fix price
price_ad <- gsub("\\$|\\,|\\*","", df_test$price) %>% as.numeric()
unique(price_ad)
df_test[, price_adj := price_ad]
# generate new and used car data tables
df_usedcars <- df_test[odo_adj == "km"]
df_newcars <- rbind(df_test[!odo_adj == "km"],df_test[is.na(odo_adj)])
df_newcars[,.N,odometer]
df_newcars[,.N,body]
df_newcars[,.N,trans]
df_newcars[,.N,engline]
df_newcars[,.N,odo_adj]
df_newcars[,.N,state]
df_newcars[body_adj == 'AMT']
body_type <- c("Hatch", "SUV", "Sedan", "People Mover",
"Ute", "Convertible", "Cab Chassis",
"Coupe", "Van", "AMT", "Bus", "Wagon", "Light Truck")
# fix body type
body_adj <- ifelse(df_newcars$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_newcars$odometer, df_newcars$body)
unique(body_adj)
df_newcars[, body_adj := body_adj]
df_newcars <- df_newcars[!body_adj == "" & body_adj!= "AMT"]
df_newcars[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_newcars$trans %in% c("Automatic", "Manual","AMT"), df_newcars$trans, df_newcars$body)
unique(trans_adj)
df_newcars[, trans_ad := trans_adj]
df_newcars[,.N,trans_ad]
df_newcars <- df_newcars[trans_ad != "Hatch"]
# fix odometer
df_newcars[, odo_ad := 0]
# fix engine
engine_adj <- ifelse(df_newcars$engline %in% "", df_newcars$trans, df_newcars$engline)
unique(engine_adj)
df_newcars[, engine_ad := engine_adj]
df_newcars[,.N,engine_ad]
# fix state
df_newcars[,.N,state_only]
# variable check
df_newcars[,.N,state_only]
df_newcars[,.N,price_adj][order(N)]
df_newcars[,.N,body_adj]
df_newcars[,.N,trans_ad]
df_newcars[,.N,engine_ad]
###########################################################
# used car check
df_usedcars[,.N,state_only]
df_usedcars[,.N,price_adj][order(N)]
df_usedcars[,.N,body]
df_usedcars[,.N,trans]
df_usedcars[,.N,engline]
# fix body type
df_usedcars <- df_usedcars[body != "Manual" & body != "AMT"]
df_usedcars[, body_adj := body]
# fix trans
df_usedcars[,trans_ad:= trans]
# odo
df_usedcars[, odo_ad := odometer]
# fix engine
unique(df_usedcars$engline)
df_usedcars[, engine_ad := engline]
str(df_newcars)
# fix body type
body_adj <- ifelse(df_test$body %in% c("Automatic", "Manual","DC135kW","AC140kW"), df_test$odometer, df_test$body)
unique(body_adj)
df_test[, body_adj := body_adj]
df_test <- df_test[!body_adj == "" & body_adj!= "AMT"]
df_test[,.N,body_adj]
# fix trans
trans_adj <- ifelse(df_test$trans %in% c("Automatic", "Manual","AMT"), df_test$trans, df_test$body)
unique(trans_adj)
df_test[, trans_ad := trans_adj]
df_test[,.N,trans_ad]
df_test <- df_test[trans_ad != "Hatch"]
# fix odometer
df_test[, odo_ad := 0]
# fix engine
engine_adj <- ifelse(df_test$engline %in% "", df_test$trans, df_test$engline)
unique(engine_adj)
df_test[, engine_ad := engine_adj]
df_test[,.N,engine_ad]
# fix state
df_test[,.N,state_only]
# variable check
df_test[,.N,state_only]
df_test[,.N,price_adj][order(N)]
df_test[,.N,body_adj]
df_test <- df_test[body_adj != "147,014 km" & body_adj !="194,132 km"]
df_test[,.N,trans_ad]
df_test <- df_test[trans_ad != "People Mover" & trans_ad != "SUV"]
df_test[,.N,engine_ad]
unique(df_test$engine_ad)
# complete
fwrite(df_test,paste0(filepath,"data_all_clean_30_08_2021.csv"))
fwrite(df_newcars,paste0(filepath,"data_new_clean_30_08_2021.csv"))
fwrite(df_usedcars,paste0(filepath,"data_used_clean_30_08_2021.csv"))
###########################################################
# used car check
df_usedcars[,.N,state_only]
df_usedcars[,.N,price_adj][order(N)]
df_usedcars[,.N,body]
df_usedcars[,.N,trans]
df_usedcars[,.N,engline]
df_test[,.N,seller_ad]
View(df_test)
df_test[,.N,seller_ad]
df_newcars[,.N,seller_ad]
str(df_test)
df_test$seller_ad %>% unique()
library(data.table)
library(tidyverse)
df_test[,.N,seller_ad]
View(df_test)
