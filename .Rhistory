list_12cars_if <- data.table()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars, list_12cars_if)
}
list_cars_new <- data.table()
for (i in 1:2) {
redr$navigate(links_new[[1]][i])
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.table()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
View(list_cars_new)
# to cleanup the port, by kill the java instance(s) inside Rstudio
# refer: https://github.com/ropensci/RSelenium/issues/228
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
# check if ports still open
pingr::ping_port("localhost", 4567)
# Check the available chrome version, the default is latest
verlist <- binman::list_versions("chromedriver") %>% flatten_chr()
# check my chrome version. wmic: WMI command-line
version <- system2(command = "wmic",args = 'datafile where name="C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe" get Version /value',stdout = TRUE,stderr = TRUE)
version <- str_sub(version[3],start = 9,end = -2)
# select the latest version earlier the current chrome version
ver <- max(verlist[version > verlist])
# driver setting
driver <- rsDriver(browser = "chrome", chromever = ver)
driver$client$close()
redr <- driver[["client"]]
redr$open()
# redr$close()
View(links_new)
links_new[[1]]
for (i in 1:2) {
redr$navigate(links_new[[1]][i])
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.table()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
View(list_cars_new)
for (i in 1:2) {
redr$navigate(links_new[[1]][i])
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.table()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
View(list_cars_new)
list_cars_new <- data.table()
redr$navigate(links_new[[1]][i])
rm(page_if)
rm(soup_if)
list_cars_new <- data.table()
for (i in 1:2) {
redr$navigate(links_new[[1]][i])
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.table()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
View(list_cars_new)
# to cleanup the port, by kill the java instance(s) inside Rstudio
# refer: https://github.com/ropensci/RSelenium/issues/228
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
# check if ports still open
pingr::ping_port("localhost", 4567)
# Check the available chrome version, the default is latest
verlist <- binman::list_versions("chromedriver") %>% flatten_chr()
# check my chrome version. wmic: WMI command-line
version <- system2(command = "wmic",args = 'datafile where name="C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe" get Version /value',stdout = TRUE,stderr = TRUE)
version <- str_sub(version[3],start = 9,end = -2)
# select the latest version earlier the current chrome version
ver <- max(verlist[version > verlist])
# driver setting
driver <- rsDriver(browser = "chrome", chromever = ver)
driver$client$close()
redr <- driver[["client"]]
redr$open()
# redr$close()
# Check the available chrome version, the default is latest
verlist <- binman::list_versions("chromedriver") %>% flatten_chr()
# check my chrome version. wmic: WMI command-line
version <- system2(command = "wmic",args = 'datafile where name="C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe" get Version /value',stdout = TRUE,stderr = TRUE)
version <- str_sub(version[3],start = 9,end = -2)
# select the latest version earlier the current chrome version
ver <- max(verlist[version > verlist])
# driver setting
driver <- rsDriver(browser = "chrome", chromever = ver)
driver$client$close()
redr <- driver[["client"]]
redr$open()
# redr$close()
# test_12cars <- page %>% html_nodes(".price .js-encode-search") %>%
# html_attr("href") %>% paste0(url_carsales,.) %>% data.table()
url_carsales <- "https://www.carsales.com.au"
urls_new <- "https://www.carsales.com.au/cars/new/electric-fueltype/?sort=Price&offset="
urls_used <- "https://www.carsales.com.au/cars/used/electric-fueltype/?sort=Price&offset="
urls_demo <- "https://www.carsales.com.au/cars/demo-and-near-new/electric-fueltype/?sort=Price&offset="
links_new <- data.table()
for (i in (seq(0,38,1)*12)) {
url_with_number <- paste0(urls_new,i)
links_new <<- rbind(links_new, url_with_number)
}
links_used <- data.table()
for (i in (seq(0,16,1)*12)) {
url_with_number <- paste0(urls_used,i)
links_used <<- rbind(links_used, url_with_number)
}
links_demo <- data.table()
for (i in (seq(0,16,1)*12)) {
url_with_number <- paste0(urls_demo,i)
links_demo <<- rbind(links_demo, url_with_number)
}
links_new
list_cars_new <- data.table()
for (i in 1:2) {
redr$navigate(links_new[[1]][i])
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.table()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
for (i in 1:2) {
redr$navigate(links_new[[1]][i])
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.table()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
for (i in 1:2) {
redr$navigate(links_new[[1]][i])
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.frame()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
View(soup_if)
soup_if[[1]]
View(soup_if)
View(page_if)
links_new <- sapply(links_new, as.character)
links_used <- sapply(links_used, as.character)
links_demo <- sapply(links_demo, as.character)
for (i in 1:2) {
link_if <- links_new[[1]][i]
redr$navigate(link_if)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.frame()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
links_new
links_new[1]
for (i in 1:2) {
link_if <- links_new[i]
redr$navigate(link_if)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.frame()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
View(links_new)
links_new[1]
for (i in 1:2) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.frame()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
rm(page_if,soup_if)
list_cars_new <- data.frame()
for (i in 1:2) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
list_12cars_if <- data.frame()
list_12cars_if <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
list_cars_new <- data.frame()
for (i in 1:2) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page %>% html_nodes(".card-body") %>% html_text() %>% data.table()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
xml2::read_html(soup_if[[1]])
page_if <- xml2::read_html(soup_if[[1]])
elements <- page %>% html_nodes(".card-body") %>% html_text()
for (i in 1:2) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
}
View(list_cars_new)
links_new <- data.table()
for (i in (seq(0,38,1)*12)) {
url_with_number <- paste0(urls_new,i)
links_new <<- rbind(links_new, url_with_number)
}
links_new <- sapply(links_new, as.character)
links_new[1]
links_used <- data.table()
for (i in (seq(0,16,1)*12)) {
url_with_number <- paste0(urls_used,i)
links_used <<- rbind(links_used, url_with_number)
}
links_used <- sapply(links_used, as.character)
links_demo <- data.table()
for (i in (seq(0,16,1)*12)) {
url_with_number <- paste0(urls_demo,i)
links_demo <<- rbind(links_demo, url_with_number)
}
links_demo <- sapply(links_demo, as.character)
rm(page_if,soup_if)
list_cars_new <- data.frame()
for (i in 1:39) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
paste(i,word(elements,1,3))
}
list_cars_new <- data.frame()
for (i in 1:39) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
print(i,word(elements,1,3))
}
list_cars_new <- data.frame()
for (i in 1:39) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
print(i,word(elements,1,1))
}
for (i in 1:39) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
print(i,elements[1])
}
for (i in 1:39) {
link_if <- links_new[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_new <<- rbind(list_cars_new, list_12cars_if)
print(paste(i,word(elements,1,3)))
}
View(list_cars_new)
list_cars_used <- data.table()
for (i in 1:17) {
link_if <- links_used[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_used <<- rbind(list_cars_used, list_12cars_if)
print(paste(i,word(elements,1,3)))
}
list_cars_demo <- data.table()
for (i in 1:17) {
link_if <- links_demo[i]
redr$navigate(link_if)
Sys.sleep(0.5)
soup_if <- redr$getPageSource()
page_if <- xml2::read_html(soup_if[[1]])
elements <- page_if %>% html_nodes(".card-body") %>% html_text()
list_12cars_if <- data.frame(raw_ele = elements)
list_cars_demo <<- rbind(list_cars_demo, list_12cars_if)
print(paste(i,word(elements,1,3)))
}
redr$close()
# to cleanup the port, by kill the java instance(s) inside Rstudio
# refer: https://github.com/ropensci/RSelenium/issues/228
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
# check if ports still open
pingr::ping_port("localhost", 4567)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
library(data.table)
# Chunk 3: test
list_new <- data.table(list_cars_new)
list_cars_new$raw_ele[1] %>%
str_remove_all(.,"\n|  ")
# title
list_cars_new$raw_ele[1] %>%
str_remove_all(.,"\n|  |,") %>%
str_remove_all(., "\\$.*")
# Chunk 4: new
list_new[, raw_ele := str_remove_all(raw_ele,"\n|  |,")]
# title
list_new[, titles := str_remove_all(raw_ele, "\\$.*|Enquire.*")]
# price
list_new$raw_ele[347]
## remove special offer information (white noise)
list_new[, raw_adjust := str_remove_all(raw_ele, "\\Special Offer.*")]
price <- str_extract_all(list_new$raw_adjust, "\\$.[0-9]+|\\Enquire for price")
list_new$price <- price
# model year
list_new[, Model_year := word(raw_adjust, 1, 1)]
# Make
list_new[, Make := word(raw_adjust, 2,2)]
list_new[, .N, Make][order(-Make)]
# Model
list_new[, model := str_extract(titles,
"e-tron|i3|iX|IONIQ|Kona|I-PACE|Niro|EQA|EQC|ZS EV|Hatch|LEAF|Taycan|Kangoo|Model 3|XC40")]
# Body type
list_new[, body_type := str_extract(raw_adjust,
"Hatch|Sedan|SUV|Van|Wagon")]
# Battery
list_new$raw_adjust[165] %>%
str_extract(., "150[:alpha:]{2}")
list_new[, battery := str_extract(raw_adjust, "AC[:alnum:]{5}|DC[:alnum:]{5}|150[:alpha:]{2}|294[:alpha:]{2}")]
## fill missing battery details manually
list_new[is.na(battery), .N, .(raw_adjust, battery)]
### Performance Badge : 335KW combined
### long range badge: 258KW combined
list_new[, battery := ifelse(str_detect(raw_adjust, "Long Range"), "258KW",
ifelse(str_detect(raw_adjust, "Performance Auto"), "335KW", battery))]
# KW
list_new[, kw := str_extract(battery, "[0-9]+")]
# range
list_new$raw_adjust[165] %>%
str_extract(., "range: [0-9]+")
list_new[, range := str_extract(raw_adjust, "range: [0-9]+")]
## Check NAs
list_new[is.na(range),.N,.(raw_adjust, raw_ele,range)]
### 1: 412KM  2: 412KM  Jaguar missing  9&10: 260km  11:557km  12&13:200km  14&15&16: 270km
list_new[, range_km := ifelse(!is.na(range), str_extract(range, "[0-9]+"),
ifelse(str_detect(raw_adjust, "Porsche"), "412",
ifelse(str_detect(raw_adjust, "BMW"), "260",
ifelse(str_detect(raw_adjust, "Kona"), "557",
ifelse(str_detect(raw_adjust, "Renault"), "200",
"270")))))]
#
df_new_clean <- data.table(title = list_new$titles, price = list_new$price, my = list_new$Model_year, make = list_new$Make,
model = list_new$model, body_type = list_new$body_type, battery = list_new$battery,
kw = list_new$kw, range_km = list_new$range_km, odo = 0)
# Chunk 5
View(list_new)
View(df_new_clean)
df_new_clean <- data.table(title = list_new$titles,
price = as.numeric(str_extract(list_new$price, "[0-9]+")),
my = list_new$Model_year, make = list_new$Make,
model = list_new$model, body_type = list_new$body_type, battery = list_new$battery,
kw = as.numeric(list_new$kw),
range_km = as.numeric(list_new$range_km), odo = 0)
View(list_cars_demo)
View(list_cars_used)
list_used_demo <- rbind(list_cars_used, list_cars_demo)
View(list_used_demo)
list_used_demo[, raw_ele := str_remove_all(raw_ele,"\n|  |,|*")]
list_used_demo[, raw_ele := str_remove_all(raw_ele,"\n|  |,|\*")]
list_used_demo[, raw_ele := str_remove_all(raw_ele,"\n|  |,|\\*")]
# title
list_used_demo[, titles := str_remove_all(raw_ele, "\\$.*|Enquire.*")]
## remove special offer information (white noise)
price <- str_extract(list_new$raw_adjust, "\\$.[0-9]+|\\Enquire for price")
price
## remove special offer information (white noise)
price <- str_extract(list_used_demo$raw_adjust, "\\$.[0-9]+|\\Enquire for price")
price
## remove special offer information (white noise)
price <- str_extract(list_used_demo$raw_ele, "\\$.[0-9]+|\\Enquire for price")
price
list_used_demo$price <- price
# model year
list_used_demo[, Model_year := word(raw_ele, 1, 1)]
# Make
list_new[, Make := word(raw_adjust, 2,2)]
# Make
list_used_demo[, Make := word(raw_ele, 2,2)]
list_used_demo[, .N, Make][order(-Make)]
# Model
list_used_demo[, model := str_extract(titles,
"e-tron|i3|iX|IONIQ|Kona|I-PACE|Niro|EQA|EQC|ZS EV|Hatch|LEAF|Taycan|Kangoo|Model 3|XC40")]
# Model
list_used_demo[, model := str_extract(titles,
"e-tron|i3|iX|IONIQ|Kona|I-PACE|Niro|EQA|EQC|ZS EV|Hatch|LEAF|Taycan|Kangoo|Model 3|XC40|Model X|Model S")]
# Body type
list_used_demo[, body_type := str_extract(raw_ele,
"Hatch|Sedan|SUV|Van|Wagon")]
# Battery
list_used_demo[, battery := str_extract(raw_adjust, "AC[:alnum:]{5}|DC[:alnum:]{5}|150[:alpha:]{2}|294[:alpha:]{2}")]
# Battery
list_used_demo[, battery := str_extract(raw_ele, "AC[:alnum:]{5}|DC[:alnum:]{5}|150[:alpha:]{2}|294[:alpha:]{2}")]
## fill missing battery details manually
list_used_demo[is.na(battery), .N, .(raw_ele, battery)]
### Performance Badge : 335KW combined
### long range badge: 258KW combined
list_used_demo[, battery := ifelse(str_detect(raw_ele, "Long Range"), "258KW",
ifelse(str_detect(raw_ele, "Performance Auto"), "335KW", battery))]
## fill missing battery details manually
list_used_demo[is.na(battery), .N, .(raw_ele, battery)]
### Performance Badge : 335KW combined
### long range badge: 258KW combined
list_used_demo[, battery := ifelse(str_detect(raw_ele, "Long Range"), "258KW",
ifelse(str_detect(raw_ele, "Performance Auto"), "335KW",
ifelse(raw_ele, "2016 Nissan LEAF"), "80",
battery))]
### Performance Badge : 335KW combined
### long range badge: 258KW combined
list_used_demo[, battery := ifelse(str_detect(raw_ele, "Long Range"), "258KW",
ifelse(str_detect(raw_ele, "Performance Auto"), "335KW",
ifelse(str_detect(raw_ele, "2016 Nissan LEAF"), "80",
battery))))]
### Performance Badge : 335KW combined
### long range badge: 258KW combined
list_used_demo[, battery := ifelse(str_detect(raw_ele, "Long Range"), "258KW",
ifelse(str_detect(raw_ele, "Performance Auto"), "335KW",
ifelse(str_detect(raw_ele, "2016 Nissan LEAF"), "80",
battery)))]
# KW
list_used_demo[, kw := str_extract(battery, "[0-9]+")]
# range
list_used_demo[, range := str_extract(raw_ele, "range: [0-9]+")]
## Check NAs
list_new[is.na(range),.N,.(raw_adjust, raw_ele,range)]
## Check NAs
list_used_demo[is.na(range),.N,.(raw_adjust, raw_ele,range)]
## Check NAs
list_used_demo[is.na(range),.N,.(raw_ele,range)]
### 1: 412KM  2: 412KM  Jaguar missing  9&10: 260km  11:557km  12&13:200km  14&15&16: 270km
list_used_demo[, range_km := ifelse(!is.na(range), str_extract(range, "[0-9]+"),
ifelse(str_detect(raw_adjust, "Porsche"), "412",
ifelse(str_detect(raw_adjust, "BMW"), "260",
ifelse(str_detect(raw_adjust, "Kona"), "557",
ifelse(str_detect(raw_adjust, "Renault"), "200",
"270")))))]
### 1: 412KM  2: 412KM  Jaguar missing  9&10: 260km  11:557km  12&13:200km  14&15&16: 270km
list_used_demo[, range_km := ifelse(!is.na(range), str_extract(range, "[0-9]+"),
ifelse(str_detect(raw_ele, "Porsche"), "412",
ifelse(str_detect(raw_ele, "BMW"), "260",
ifelse(str_detect(raw_ele, "Kona"), "557",
ifelse(str_detect(raw_ele, "Renault"), "200",
"270")))))]
# odometer
list_used_demo[1]
# odometer
list_used_demo$raw_ele[1]
# odometer
list_used_demo$raw_ele[1] %>%
str_extract(., "[0-9]+.km")
list_used_demo[, odo := str_extract(raw_ele, "[0-9]+.km")]
df_used_demo_clean <- data.table(title = list_used_demo$titles,
price = as.numeric(str_extract(list_used_demo$price, "[0-9]+")),
my = list_used_demo$Model_year, make = list_used_demo$Make,
model = list_used_demo$model, body_type = list_used_demo$body_type, battery = list_used_demo$battery,
kw = as.numeric(list_used_demo$kw),
range_km = as.numeric(list_used_demo$range_km),
odo = as.numeric(str_extract(list_used_demo$odo, "[0-9]+")))
View(df_used_demo_clean)
df_EV_clean<- merge(df_new_clean, df_used_demo_clean)
View(df_EV_clean)
df_EV_clean <- rbind(df_new_clean, df_used_demo_clean)
View(df_EV_clean)
filepath <- "D:/Projects/EVE/Eve/"
fwrite(df_EV_clean, paste0(filepath,"df_EV_clean.csv"))
