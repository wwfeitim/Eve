---
title: "real_estate_scrape"
author: "Wenwei Fei"
date: "30/06/2021"
output: pdf_document
editor_options: 
  chunk_output_type: console
---

```{r packages}
library(tidyverse)
library(RSelenium)
library(rvest)
library(xml2)
library(httr)
library(data.table)
```

```{r server pack}
# Check the available chrome version, the default is latest
verlist <- binman::list_versions("chromedriver") %>% flatten_chr()
# check my chrome version. wmic: WMI command-line 
version <- system2(command = "wmic",args = 'datafile where name="C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe" get Version /value',stdout = TRUE,stderr = TRUE)
version <- str_sub(version[3],start = 9,end = -2)
# select the latest version earlier the current chrome version 
ver <- max(verlist[version > verlist])
# driver setting
driver <- rsDriver(browser = "chrome", chromever = ver)
driver$client$close()
redr <- driver[["client"]]
redr$open()
# redr$close()
```

```{r port kill}
# to cleanup the port, by kill the java instance(s) inside Rstudio
# refer: https://github.com/ropensci/RSelenium/issues/228
system("taskkill /im java.exe /f", intern=FALSE, ignore.stdout=FALSE)
# check if ports still open
pingr::ping_port("localhost", 4567)
```

```{r url}
main_site <- "https://www.domain.com.au"

url <- clayton_300_400

clayton_300_400 <- "https://www.domain.com.au/rent/clayton-vic-3168/?ptype=duplex,free-standing,new-home-designs,new-house-land,semi-detached,terrace,town-house,villa&bedrooms=2-any&price=300-400&excludedeposittaken=1&carspaces=1-any&ssubs=0&page=1"

Ashwood_300_400 <- "https://www.domain.com.au/rent/ashwood-vic-3147/?ptype=duplex,free-standing,new-home-designs,new-house-land,semi-detached,terrace,town-house,villa&bedrooms=2-any&price=300-400&excludedeposittaken=1&carspaces=1-any&ssubs=0&page=1"

melbourne_region_noLand <- "https://www.domain.com.au/rent/melbourne-region-vic/?ptype=apartment-unit-flat,block-of-units,duplex,free-standing,new-apartments,new-home-designs,new-house-land,pent-house,semi-detached,studio,terrace,town-house,villa&excludedeposittaken=1&ssubs=0&page=1"


```

```{r selenium}
redr$navigate(url)

total_property_number <- GET(url) %>% content(., as = "parsed") %>% html_nodes(".css-ekkwk0") %>% html_text() %>% word(.,1) %>% as.numeric()

total_property_number/20

urls <- sapply(1:1137, function(x){
  url <- "https://www.domain.com.au/rent/melbourne-region-vic/?ptype=apartment-unit-flat,block-of-units,duplex,free-standing,new-apartments,new-home-designs,new-house-land,pent-house,semi-detached,studio,terrace,town-house,villa&excludedeposittaken=1&ssubs=0&page="
  urls <- paste0(url,x)
})


urls <- data.frame()
urls <- GET(url) %>% content(., as = "parsed") %>% html_nodes(".css-3ebg57") %>% html_attr("href") %>% data.frame(links = .) %>% unlist() %>% paste0(main_site,.) %>% c(url,.)

```


```{r selenium, include=FALSE}
# selenium
each_prop_links <- redr$findElements(using = "xpath", value = "//*[@class='address is-two-lines css-1y2bib4']")
all_links_a_page <- sapply(each_prop_links,function(x){x$getElementAttribute("href")})
all_links_a_page <- data.frame(link = unlist(all_links_a_page))
```


```{r rvest, include=FALSE}
# rvest
response <- GET(urls[1])
page <- content(response , as = "parsed")
page_links <- page %>% html_nodes(".address.is-two-lines.css-1y2bib4") %>% html_attr("href")

test_page %>% html_elements(".address.is-two-lines.css-1y2bib4") %>% html_attr("href")
```


```{r rvest all link}
store_links <- data.frame()
pagelinks <- function(urls){
  response <- GET(urls)
  page <- content(response, as = "parsed")
  one_page_links <- page %>% html_nodes(".address.is-two-lines.css-1y2bib4") %>% 
    html_attr("href") %>% data.frame(links = .)
  store_links <<- rbind(store_links, one_page_links)
}
sapply(urls,pagelinks)

library(data.table)
# check if there are duplicates
store_links %>% uniqueN()
```


```{r selenium all links}
# full links
links_all <- data.frame()
for(i in 1:(length(urls))){
  redr$navigate(paste0(urls[[i]]))
  Sys.sleep(3)
  links <- redr$findElements(using = "xpath", value = "//*[@class='address is-two-lines css-1y2bib4']")
  df <- sapply(links,function(x){x$getElementAttribute("href")})
  df <- data.frame(link = unlist(df))
  Sys.sleep(1)
  links_all = rbind(links_all, df)
}

uniqueN(links_all)
```

```{r test sample}
library(httr)
links <- sapply(links_all, as.character)

links <- sapply(store_links, as.character)

redr$navigate(links[73])

response <- GET(links[1])
page <- content(response, as = "parsed")
# price
price <- page %>% html_nodes(".css-1texeil") %>% 
  html_text() %>% 
  str_extract(.,"\\-*\\d+\\.*\\d*")

# address
page %>% html_nodes(".css-164r41r") %>% 
  html_text() %>% 
  word(.,-1)
# house type
page %>% html_nodes(".css-in3yi3") %>% 
  html_text() %>% 
  .[[2]]
# bedroom
bed <- page %>% html_nodes(".css-lvv8is") %>% 
  html_text() %>% 
  .[[1]] %>% word(.,1,1)

bath <- page %>% html_nodes(".css-lvv8is") %>% 
  html_text() %>% 
  .[[2]] %>% word(.,1)

park <- page %>% html_nodes(".css-lvv8is") %>% 
  html_text() %>% 
  .[[3]] %>% word(.,1)

# description
decp <- page %>% html_nodes(".css-bq4jj8 p") %>% 
  html_text() %>% 
  paste(collapse = " ")
# test if there is heating information
decp %>% 
  str_detect(" heat")

ifelse(str_detect(decp," heat"),1,0)
# test if there is condition
ifelse(str_detect(decp," condition"),1,0)
```

```{r rvest}
links <- sapply(store_links, as.character)

df_all_data <- data.frame()

scraper <- function(links){
  # single url 
  url <- links
  # PARSE PAGE URL
  response <- GET(url)
  page <- content(response, as = "parsed")
  Sys.sleep(0.5)
  # rent price
  rent_price <- 
    page %>% html_nodes(".css-1texeil") %>% 
    html_text() %>% 
    str_extract(.,"\\-*\\d+\\.*\\d*")
  # address
  address <- 
    page %>% html_nodes(".css-164r41r") %>% 
    html_text()
  #postcode
  postcode <- 
    address %>% word(.,-1)
  # property type
  type <- page %>% html_nodes(".css-in3yi3") %>% 
    html_text() %>% 
    .[[2]]
  # bedroom
  bedroom <- page %>% html_nodes(".css-lvv8is") %>% 
    html_text() %>% 
    .[[1]] %>% word(.,1,1)
  #bathroom
  bathroom <- page %>% html_nodes(".css-lvv8is") %>% 
    html_text() %>% 
    .[[2]] %>% word(.,1)
  # park
  parkspace <- page %>% html_nodes(".css-lvv8is") %>% 
    html_text() %>% 
    .[[3]] %>% word(.,1)
  # description
  description <- 
    page %>% html_nodes(".css-bq4jj8 p") %>% 
    html_text() %>% 
    paste(collapse = " ")
  # heat related information 
  heat <- ifelse(str_detect(description," heat"),1,0)
  # air condition information
  ac <- ifelse(str_detect(description," air "),1,0)
  # store single property information
  df_one_page <- data.frame(rent_price = rent_price,
                            address = address,
                            postcode = postcode,
                            type = type,
                            bedroom = bedroom,
                            bathroom = bathroom,
                            parkspace = parkspace,
                            description = description,
                            heat = heat,
                            ac = ac,
                            links = url)
  df_all_data <<- rbind(df_all_data, df_one_page)
}

sapply(links, scraper)

df_all_data <- df_all_data %>% data.table()
df_all_data[, links := links]


df_ashwood <- df_all_data %>% filter(postcode == 3147)


df_all_data$rent_price <- as.numeric(df_all_data$rent_price).
df_all_data %>% filter(bedroom == 2) %>% .$rent_price %>% mean()


df_ac <- df_all_data[ac == 1][postcode != 3149][postcode != 3171][postcode != 3170]

df_390 <- df_all_data[rent_price == 390][1,8] # description catch failed



```

reference:
Extraction of numbers from a character string
http://stla.github.io/stlapblog/posts/Numextract.html





